@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="modal fade modal-dialog modal-dialog-centered" id="AddConnectionModal" style="display: none;" tabindex="-1" aria-labelledby="AddConnectionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title" id="AddConnectionModalLabel">Add a connection</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => _errorMessage = string.Empty"></button>
      </div>
      <EditForm Model="@connection" OnValidSubmit="@HandleValidSubmit">
        <div class="modal-body">

          <div><span style="color: var(--red);">@_errorMessage</span><span style="color: var(--green)">@_successMessage</span></div>
          
          <div class="dropdowns">

            <select class="form-select" @bind="connection.PaperOneId" aria-label="paper1select">
              <option disabled selected value> -- select a paper -- </option>
              @foreach (var paper in Model.Graph.allPapers)
                {
                  <option value=@paper.Id>@paper.Title</option>
                }
            </select>
            <select class="form-select" @bind="connection.PaperTwoId" aria-label="paper2select">
              <option disabled selected value> -- select a paper -- </option>
              @foreach (var paper in Model.Graph.allPapers)
                {
                  <option value=@paper.Id>@paper.Title</option>
                }
            </select>

          </div>

          <div>
            <h2>Description</h2>
            <textarea class="form-control" @bind="connection.Description" aria-label="With textarea" placeholder="write here ..."></textarea>
          </div>

          <select class="form-select" @bind="_selectedTeamId" aria-label="teamselect">
              <option disabled selected value> -- select an option -- </option>
              @foreach (var team in Model.CurrentUser.teams)
                {
                  <option value=@team.Id>@team.TeamName</option>
                }
            </select>
        </div>
        <div class="modal-footer">
          <ButtonIcon type="submit" icon="oi oi-check" tooltip="Create"/>
        </div>
        </EditForm>
      </div>
  </div>
</div>

@code {
    private ConnectionCreateDTO connection = new();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private string _selectedTeamId;
    

    private async Task HandleValidSubmit()
    {
        if (connection.PaperOneId == connection.PaperTwoId)
        {
          _errorMessage = "Please select two different papers.";
          return;
        }

        connection.CreatorId = Model.CurrentUser.userOid == null? null : Model.CurrentUser.userOid;
        connection.ConnectionType = "other";

        var response = await Http.PostAsJsonAsync("api/Connection", connection);

        if (response.IsSuccessStatusCode)
        {
            _errorMessage = "";
            _successMessage = "Created!";
            var created = await response.Content.ReadFromJsonAsync<ConnectionDTO>();
            if (Model.CurrentUser.connections != null) 
            {
                Model.CurrentUser.connections.Append(created);
            }
            var updated = await Http.PutAsJsonAsync($"api/team/{_selectedTeamId}/connection/{created.Id}", created.Id);
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}", forceLoad: true);
        } 
        else 
        {
            _errorMessage = $"An error occured.";
        }
    }
}