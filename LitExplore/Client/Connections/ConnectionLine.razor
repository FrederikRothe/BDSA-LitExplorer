
<div class="connection">
    <svg style="width: 90vw; height: 90vh;">
        @foreach (var c in connections)
        {
            <line class="bottom" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
            <line class="c-0 top" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" @onmouseover="() => hoversOn(c)" @onmouseout="() => hoversOn(c)" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
        }
        @foreach (var c in extraConnections)
        {
            <line class="bottom" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
            <line class="c-@colour(c) top" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" @onmouseover="() => hoversOn(c)" @onmouseout="() => hoversOn(c)" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
        }
    </svg>
    
</div>
@if (_showHoverWindow) {
    <HoverWindow connection=@_hoverconnection connpaper1=@_paper1 connpaper2=@_paper2 left=@_hoverWindowLeftS() top=@_hoverWindowTopS()/>
} 
<ConnectionInfoWindow connection=@_hoverconnection paper1=@_paper1 paper2=@_paper2/>


@code {
    [Parameter] public ConnectionDTO[] connections { get; set; } = null!;
    [Parameter] public ConnectionDTO[] extraConnections { get; set; } = new ConnectionDTO[0];

    private PaperDTO getPaper(int id) => Model.Graph.allPapers.Where(p => p.Id == id).Single();
    
    private bool _showHoverWindow = false;
    private string _hoverWindowLeftS() => ((x1(_hoverconnection)+x2(_hoverconnection))/2)+"vw";
    private string _hoverWindowTopS() => ((y1(_hoverconnection)+y2(_hoverconnection))/2)+"vh";
    private int colour(ConnectionDTO c) => Model.CurrentUser.selectedTeam != null? Model.CurrentUser.selectedTeam.Colour : 5;
    private (int,int) position1(ConnectionDTO c) => Model.Graph.paperToPositions[c.PaperOneId];
    private (int,int) position2(ConnectionDTO c) => Model.Graph.paperToPositions[c.PaperTwoId];
    private int x1(ConnectionDTO c) => (position1(c).Item1); 
    private int y1(ConnectionDTO c) => (position1(c).Item2); 
    private int x2(ConnectionDTO c) => (position2(c).Item1); 
    private int y2(ConnectionDTO c) => (position2(c).Item2); 
    private string x1s(ConnectionDTO c) => x1(c)+"vw"; 
    private string y1s(ConnectionDTO c) => y1(c)+"vh"; 
    private string x2s(ConnectionDTO c) => x2(c)+"vw"; 
    private string y2s(ConnectionDTO c) => y2(c)+"vh"; 
    private void hoversOn(ConnectionDTO c) {
        _paper1 = getPaper(c.PaperOneId);
        _paper2 = getPaper(c.PaperTwoId);
        _hoverconnection = c;
        _showHoverWindow = !_showHoverWindow;
    }

    private PaperDTO _paper1 = TestEntities.paperDTO;
    private PaperDTO _paper2 = TestEntities.paperDTO;
    private ConnectionDTO _hoverconnection = TestEntities.connectionDTO;
}