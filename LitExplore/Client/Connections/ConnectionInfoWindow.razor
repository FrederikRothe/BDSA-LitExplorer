@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="connectionInfoWindow" style="display: none;" tabindex="-1" aria-labelledby="connectionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title" id="connectionModalLabel">"@paper1.Title" and "@paper2.Title"</h1>
        <button @onclick="Clear" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <ConnectionPartialInfo connection=@connection paper1=@paper1 paper2=@paper2 />
          @if (connection.Description != null && connection.Description.Length != 0) 
          {
            <h2>Description</h2>
            <p>@connection.Description</p>
          }
          @if (connection.CreatorId != CurrentUser.userOid && connection.CreatorId != null) 
          {
            <h2>Creator</h2>
            <p>@_creatorName</p>
          }
      </div>
      <div class="modal-footer info">
        @if (connection.CreatorId == CurrentUser.userOid)
        {
          <div>
            <ButtonIcon onButtonClick="startShare" icon="oi oi-people" data_bs_target="#ShareConnectionWindow" data_bs_toggle="modal" data_bs_dismiss="modal" tooltip="Share with team" />
          </div>
          <div>
            <ButtonIcon onButtonClick="delete" icon="oi oi-trash" colour="red" data_bs_dismiss="modal" tooltip="Delete" />
            <ButtonIcon onButtonClick="startUpdate" icon="oi oi-pencil" data_bs_target="#connectionUpdateWindow" data_bs_toggle="modal" data_bs_dismiss="modal" tooltip="Update" />
          </div>
        }
      </div>
    </div>
  </div>
</div>
<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="connectionUpdateWindow" style="display: none;" tabindex="-1" aria-labelledby="connectionUpdateWindowLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title" id="connectionUpdateWindowLabel">"@paper1.Title" and "@paper2.Title"</h1>
        <button @onclick="Clear" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <EditForm Model="@_updateDTO" OnValidSubmit="@update">
        <div class="modal-body">
          <ConnectionPartialInfo connection=@connection paper1=@paper1 paper2=@paper2 />
          <h2>Description</h2>
          <textarea class="form-control" @bind="_updateDTO.Description" aria-label="With textarea" placeholder="write here ..."></textarea>
        </div>
        <div class="modal-footer">
            <ButtonIcon icon="oi oi-check" type="submit" data_bs_target="#connectionInfoWindow" data_bs_toggle="modal" data_bs_dismiss="modal" tooltip="Save" />
        </div>
      </EditForm>
    </div>
  </div>
</div>
<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="ShareConnectionWindow" style="display: none;" tabindex="-1" aria-labelledby="ShareConnectionWindowLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title" id="ShareConnectionWindowLabel">"@paper1.Title" and "@paper2.Title"</h1>
        <button @onclick="Clear" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <EditForm Model="@connection" OnValidSubmit="@share">
        <div class="modal-body">
          <h2>Select teams to share the connection</h2>
          @if (connection.TeamIDs != null)
          {
            <div class="shareCheckboxes">
            @foreach(var team in CurrentUser.teams)
            { 
              <div class="form-check">
                <input class="form-check-input" @onchange="() => _shareChanges[team.Id] = !_shareChanges[team.Id]" type="checkbox" value=@team.Id id=@team.Id checked=@connection.TeamIDs.Contains(team.Id)>
                <label class="form-check-label" for=@team.Id>@team.TeamName</label>
              </div>
            }
            </div>
          }
          
        </div>
        <div class="modal-footer">
          @if (connection.CreatorId == CurrentUser.userOid)
          {
            <ButtonIcon icon="oi oi-check" type="submit" data_bs_target="#connectionInfoWindow" data_bs_toggle="modal" data_bs_dismiss="modal" tooltip="Share" />
          }
        </div>
      </EditForm>
    </div>
  </div>
</div>

@code {
    [Parameter] public ConnectionDTO connection { get; set; } = null!;

    [Parameter] public PaperDTO paper1 { get; set; } = null!;

    [Parameter] public PaperDTO paper2 { get; set; } = null!;

    [Parameter] public EventCallback refreshGraph { get; set; } 

    [Parameter] public EventCallback onClose { get; set; }

    private Dictionary<int, bool> _shareChanges = new Dictionary<int, bool>();

    private ConnectionUpdateDTO _updateDTO = new();

    private string _creatorName = "";

    protected override async Task OnParametersSetAsync()
    {
      if (connection != TestEntities.connectionDTO && connection.CreatorId != null) 
      {
        var creator = await Http.GetFromJsonAsync<UserDTO>($"api/User/{connection.CreatorId}");
        if (creator != null && creator.Name != null) _creatorName = creator.Name;
      }
    }

    private async Task Clear()
    {
      await onClose.InvokeAsync();
    }

    private void startShare() 
    {
      foreach (var team in CurrentUser.teams) 
      {
        _shareChanges[team.Id] = false;
      }
    }

    private async Task startUpdate()
    {
        _updateDTO = await Http.GetFromJsonAsync<ConnectionUpdateDTO>($"api/Connection/{connection.Id}") ?? new();
    }

    private async Task delete()
    {
      if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the connection?"))
      {
        await Http.DeleteAsync($"api/Connection/{connection.Id}");
        CurrentUser.shownConnections.RemoveAll(c => c.Id == connection.Id);
        StateHasChanged();
        await refreshGraph.InvokeAsync();
      }
    }

    private async Task update()
    {
      var response = await Http.PutAsJsonAsync($"api/Connection/{_updateDTO.Id}", _updateDTO);
      NavigationManager.NavigateTo($"{NavigationManager.BaseUri}", forceLoad: true);
    }
    
    private async Task share()
    {
      foreach (var change in _shareChanges)
      {
        if (change.Value && connection.TeamIDs != null) 
        {
          if (connection.TeamIDs.Contains(change.Key))
          {
            await Http.DeleteAsync($"api/Team/{change.Key}/connection/{connection.Id}");
            CurrentUser.shownConnections.RemoveAll(c => c.Id == connection.Id);
            StateHasChanged();
            await refreshGraph.InvokeAsync();
          } 
          else
          {
            await Http.PutAsJsonAsync($"api/Team/{change.Key}/connection/{connection.Id}", connection.Id);
            CurrentUser.shownConnections.Add(connection);
            StateHasChanged();
            await refreshGraph.InvokeAsync();
          }
        }
      }
    }
}