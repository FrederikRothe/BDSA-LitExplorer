@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="connectionInfoWindow" style="display: none;" tabindex="-1" aria-labelledby="connectionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title" id="connectionModalLabel">"@paper1.Title" and "@paper2.Title"</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ConnectionPartialInfo connection=@connection paper1=@paper1 paper2=@paper2 />
                @if (connection.Description != null) {
                    <h2>Description</h2>
                    <p>@_description</p>
                }
            </div>
            <div class="modal-footer">
                @if (connection.CreatorId == Model.CurrentUser.userOid)
                {
                    <button class="btn btn-primary" data-bs-target="#connectionUpdateWindow" data-bs-toggle="modal" data-bs-dismiss="modal">update connection</button>
                    <button @onclick="delete">delete connection</button>
                }
            </div>
        </div>
    </div>
</div>
<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="connectionUpdateWindow" style="display: none;" tabindex="-1" aria-labelledby="connectionUpdateWindowLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title" id="connectionUpdateWindowLabel">"@paper1.Title" and "@paper2.Title"</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="@connection" OnValidSubmit="@update">
                <div class="modal-body">
                    <ConnectionPartialInfo connection=@connection paper1=@paper1 paper2=@paper2 />
                    <h2>Description</h2>
                    <textarea class="form-control" @bind="_updateDTO.Description" aria-label="With textarea" placeholder="write here ..."></textarea>
                </div>
                <div class="modal-footer">
                    @if (connection.CreatorId == Model.CurrentUser.userOid)
                    {
                        <button type="submit" class="btn btn-primary" data-bs-target="#connectionInfoWindow" data-bs-toggle="modal" data-bs-dismiss="modal">Save</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public ConnectionDTO connection { get; set; } = null!;
    [Parameter] public PaperDTO paper1 { get; set; }
    [Parameter] public PaperDTO paper2 { get; set; }
    private string? _description { get => connection.Description; }

    private ConnectionUpdateDTO _updateDTO = new();

    protected override async Task OnParametersSetAsync()
    {
        _updateDTO = await Http.GetFromJsonAsync<ConnectionUpdateDTO>($"api/Connection/{connection.Id}") ?? new();
        await base.OnParametersSetAsync();
    }
    private async Task delete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the connection?"))
        {
            await Http.DeleteAsync($"api/Connection/{connection.Id}");
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}", forceLoad: true);
        }
    }

    private async Task update()
    {
        var response = await Http.PutAsJsonAsync($"api/Connection/{_updateDTO.Id}", _updateDTO);
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}", forceLoad: true);
    }
}