@inject HttpClient Http

<div class="connection" @onmousemove="@Mouse_Move">
    <svg style="width: 90vw; height: 90vh;">
        @foreach (var c in connections)
        {
            <line class="bottom" @onclick="() => setParameters(c)" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
            <line class="c-0 top" @onclick="() => setParameters(c)" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" @onmouseover="() => hoversOn(c)" @onmouseout="() => hoversOn(c)" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
        }
        @foreach (var c in extraConnections)
        {
            <line class="bottom" @onclick="() => setParameters(c)" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
            <line class="c-@colour(c) top" @onclick="() => setParameters(c)" data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" @onmouseover="() => hoversOn(c)" @onmouseout="() => hoversOn(c)" x1=@x1s(c) y1=@y1s(c) x2=@x2s(c) y2=@y2s(c) />
        }
    </svg>
    
</div>
@if (_showHoverWindow) {
    <HoverWindow connection=@_hoverconnection left=@_hoverWindowLeft top=@_hoverWindowTop/>
} 
<ConnectionInfoWindow connection=@_connectionForConnectionWindow paper1=@_paper1 paper2=@_paper2 refreshGraph=@Refresh/>


@code {
    [Parameter] public List<ConnectionDTO> connections { get; set; } = null!;
    [Parameter] public List<ConnectionDTO> extraConnections { get; set; } = new List<ConnectionDTO>();

    private PaperDTO getPaper(int id) => Model.Graph.allPapers.Where(p => p.Id == id).Single();
    
    private bool _showHoverWindow = false;

    private double _hoverWindowLeft { get; set; } = 0;
    private double _hoverWindowTop { get; set; } = 0;

    protected void Mouse_Move(MouseEventArgs e)
    {
        _hoverWindowLeft = e.ClientX;
        _hoverWindowTop = e.ClientY;
    }
    private int colour(ConnectionDTO c) => Model.CurrentUser.selectedTeam != null? Model.CurrentUser.selectedTeam.Colour : 5;
    private (int,int) position1(ConnectionDTO c) => Model.Graph.paperToPositions[c.PaperOneId];
    private (int,int) position2(ConnectionDTO c) => Model.Graph.paperToPositions[c.PaperTwoId];
    private int x1(ConnectionDTO c) => (position1(c).Item1); 
    private int y1(ConnectionDTO c) => (position1(c).Item2); 
    private int x2(ConnectionDTO c) => (position2(c).Item1); 
    private int y2(ConnectionDTO c) => (position2(c).Item2); 
    private string x1s(ConnectionDTO c) => $"{x1(c)}vw"; 
    private string y1s(ConnectionDTO c) => $"{y1(c)}vh";
    private string x2s(ConnectionDTO c) => $"{x2(c)}vw"; 
    private string y2s(ConnectionDTO c) => $"{y2(c)}vh"; 
    private void hoversOn(ConnectionDTO c) {
        _showHoverWindow = !_showHoverWindow;
        _hoverconnection = c;
    }

    private async Task setParameters(ConnectionDTO c) {
        var fullDTO = await Http.GetFromJsonAsync<ConnectionDTO>($"api/Connection/{c.Id}");
        if (fullDTO != null) _connectionForConnectionWindow = fullDTO;
        _paper1 = getPaper(c.PaperOneId);
        _paper2 = getPaper(c.PaperTwoId);
    }

    private ConnectionDTO _connectionForConnectionWindow = TestEntities.connectionDTO;
    private PaperDTO _paper1 = TestEntities.paperDTO;
    private PaperDTO _paper2 = TestEntities.paperDTO;
    private ConnectionDTO _hoverconnection = TestEntities.connectionDTO;
    [Parameter] public EventCallback refreshGraph { get; set; }

    public void Refresh() 
    {
        refreshGraph.InvokeAsync();
    }
}