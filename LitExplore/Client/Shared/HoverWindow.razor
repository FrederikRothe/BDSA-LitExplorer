@using LitExplore.Client.Connections
@using LitExplore.Client.Papers
@inject HttpClient Http

<div class=@styleclass style=@style hidden=@hidden>
    @if (paper != null) {
        <h1>@paper.Title</h1>
        <PaperPartialInfo paper=@paper />
    }
    @if (connection != null) {
        <ConnectionPartialInfo connection=@connection paper1=@connpaper1 paper2=@connpaper2 />
        @if (connection.ConnectionType.Contains("other")) {
            <h2>Description</h2>
            <p>@conndescription</p>
        }
    }
</div>

@code {
    [Parameter] public PaperDTO? paper { get; set; }
    [Parameter] public ConnectionDTO? connection { get; set; }
    public PaperDTO? connpaper1 { get; set; }
    public PaperDTO? connpaper2 { get; set; }
    [Parameter] public string? left { get; set; }
    [Parameter] public string? top { get; set; }
    
    [Parameter] public bool hidden { get;set; }

    protected override async Task OnParametersSetAsync()
    {
        if (connection != null)
        {
            connpaper1 = Model.Graph.allPapers.Where(p => p.Id == connection.PaperOneId).Single();
            connpaper2 = Model.Graph.allPapers.Where(p => p.Id == connection.PaperTwoId).Single();
        }
        await base.OnParametersSetAsync();
    }
    private string styleclass { get => paper==null? "window connwindow" : "window paperwindow"; }
    private string style { get => left == null? topPaper : $"left:{left}; top:{top};"; }
    private string? conndescription
    {
        get => (connection != null && connection.Description != null)? connection.Description : null;
    }

    private string topPaper 
    {
        get 
        {
            if (paper != null) 
            {
                var (l, t) = Model.Graph.paperToPositions[paper.Id];
                if (t > 50) return "transform: translateY(-100%); top: -60px;";
            }
            return "top: 45px;";
        }
    }
}