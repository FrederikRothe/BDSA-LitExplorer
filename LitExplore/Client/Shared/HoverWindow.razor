@using LitExplore.Client.Connections
@using LitExplore.Client.Papers
@inject HttpClient Http

<div class=@styleclass data-bs-toggle="modal" data-bs-target="#connectionInfoWindow" style=@style hidden=@hidden>
    @if (paper != null) {
        <h1>@paper.Title</h1>
        <PaperPartialInfo paper=@paper />
    }
    @if (connection != null) {
        <ConnectionPartialInfo connection=@connection paper1=@connpaper1 paper2=@connpaper2 />
        @if (connection.ConnectionType.Contains("other")) {
            <h2>Description</h2>
            <p>@conndescription</p>
        }
    }
</div>

@code {
    [Parameter] public PaperDTO? paper { get; set; }
    [Parameter] public ConnectionDTO? connection { get; set; }
    public PaperDTO? connpaper1 { get; set; }
    public PaperDTO? connpaper2 { get; set; }
    [Parameter] public string? left { get; set; }
    [Parameter] public string? top { get; set; }
    
    [Parameter] public bool hidden { get;set; }

    protected override async Task OnParametersSetAsync()
    {
        if (connection != null)
        {
            connpaper1 = Model.Graph.allPapers.Where(p => p.Id == connection.PaperOneId).Single();
            connpaper2 = Model.Graph.allPapers.Where(p => p.Id == connection.PaperTwoId).Single();
        }
        await base.OnParametersSetAsync();
    }
    private string styleclass { get => paper==null? "window connwindow" : "window paperwindow"; }
    private string style { get => left == null? "" : $"left:{left}; top:{top};"; }
    private string conndescription
    {
        get
        {
            if (connection.Description.Length > 20) {
                return connection.Description.Substring(0,20)+"...";
            } 
            return connection.Description;
        }
    }
}