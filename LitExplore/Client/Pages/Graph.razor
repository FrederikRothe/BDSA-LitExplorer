@page "/"
@using LitExplore.Client.Connections
@using LitExplore.Client.Papers
@using LitExplore.Client.Teams
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<PageTitle>LitExplore</PageTitle>

<div>
    @for (int i=0; i<12; i++) {
        <div class="paperbutton" @onclick="() => setSelectedPaper(_paper)">
            <PaperNode paper=@_paper/>
        </div>
    }
    <div class="connectionbutton" @onclick="() => setSelectedConnection(_connection)">
        <ConnectionLine connection=@_connection/>
    </div>

    <div class="teams">
        @foreach (var team in teams)
        {
            <button type="button" class="teambutton" data-bs-toggle="modal" data-bs-target="#teamModal" @onclick="() => setSelectedTeam(team)"/>        
        }
        <button class="addteambutton" data-bs-toggle="modal" data-bs-target="#addTeamModal"/>
    </div>
    <PaperInfoWindow paper=@_selectedPaper/>
    <ConnectionInfoWindow connection=@_selectedConnection/>
    <TeamCustomisation currentTeam=@_selectedTeam/>
    <TeamForm/>
</div>


@code {
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}Login");
        } 
        else 
        {
            if (!Model.CurrentUser.initialised()) 
            {
                string userId = string.Empty;
                var claims = user.Claims;
                foreach (var claim in claims) 
                {
                    if (claim.Type.Equals("oid"))
                    {
                        userId = claim.Value;
                    }
                }

                var userDTO = new UserCreateDTO
                {
                    oid = userId,
                    Name = user.Identity?.Name
                };
                
                var response = await Http.PostAsJsonAsync("api/User", userDTO);
                Model.CurrentUser.userOid = userId;
                if (Model.CurrentUser.teams == null) Model.CurrentUser.teams = await Http.GetFromJsonAsync<TeamDTO[]>($"api/User/teams/{userId}");
                if (Model.CurrentUser.connections == null) Model.CurrentUser.connections = await Http.GetFromJsonAsync<ConnectionDTO[]>($"api/User/connections/{userId}");
            }

@code {
    private Paper _paper = TestEntities.genericPaper;
    private Connection _connection = TestEntities.testconn1;
    private Paper _selectedPaper = TestEntities.genericPaper;
    private void setSelectedPaper(Paper paper) {
        _selectedPaper = paper;
    }
    private Connection _selectedConnection = TestEntities.testconn1;
    private void setSelectedConnection(Connection connection) {
        _selectedConnection = connection;
    }
    private List<Team> teams = new List<Team>() {TestEntities.team1, TestEntities.team2};
    private Team _selectedTeam = TestEntities.team1;
    private void setSelectedTeam(Team team) {
        _selectedTeam = team;
    }

    private bool _dataIsLoaded = false;

    
    private ConnectionLines? _connectionLines;
    private int getLeftPosPaper(PaperDTO p) => Model.Graph.paperToPositions[p.Id].Item1;
    private int getTopPosPaper(PaperDTO p) => Model.Graph.paperToPositions[p.Id].Item2;

    private ConnectionDTO[]? _userOrTeamConnections;
    private PaperDTO _selectedPaper = TestEntities.paperDTO;
    private TeamDTO _selectedTeam = TestEntities.teamDTO;
    private void setSelectedTeam(TeamDTO team) 
    {
        _selectedTeam = team;
    }
}