@page "/"
@using LitExplore.Client.Connections
@using LitExplore.Client.Papers
@using LitExplore.Client.Teams
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<PageTitle>LitExplore</PageTitle>

<AuthorizeView>
  <Authorized>
  <div>
    @if ( _dataIsLoaded )
    {
        @foreach (PaperDTO p in Model.Graph.allPapers) 
        {
            <div class="paperbutton" @onclick="() => _selectedPaper = p">
                <PaperNode paper=@p left=@getLeftPosPaper(p) top=@getTopPosPaper(p) />
            </div>
        }
        <ConnectionLines connections=@Model.Graph.publicConnections extraConnections=@_userOrTeamConnections refreshGraph=@Refresh/>
        <AddConnectionWindow refreshGraph=@Refresh />
    } 
    else 
    {
        <div class="loadingcontainer">
            <div class="loadinglabel">Loading ...</div>
        </div>
    }

    <div class="teams">
        <span class="teamHeader">Teams</span>
        @if (CurrentUser.teams != null)
        {
            foreach (var team in CurrentUser.teams)
            {
                <div class="teamSection">
                    @if(_selectedTeam != null && _selectedTeam.Id == team.Id)
                    {
                        <button class="edit" data-bs-toggle="modal" data-bs-target="#teamModal">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button type="button" class="c-@colour(team) teamButton selected" @onclick="() => setSelectedTeam(team)">
                            <span>@team.TeamName.Substring(0,1).ToUpper()</span>
                        </button>
                    }
                    else 
                    {
                        <button type="button" class="c-@colour(team) teamButton" @onclick="() => setSelectedTeam(team)">
                            <span>@team.TeamName.Substring(0,1).ToUpper()</span>
                        </button>
                    }
                </div>
                }
            <button class="c-0" data-bs-toggle="modal" data-bs-target="#addTeamModal"><div class="addTeamButtonText"><span class="oi oi-plus"></span></div></button>
        }
    </div>
    <PaperInfoWindow paper=@_selectedPaper/>
    <TeamCustomisation team=@_selectedTeam refreshGraph=@Refresh refreshTeam=@RefreshTeam/>
    <TeamForm adminId=@CurrentUser.userOid refreshGraph=@Refresh />
    <div class="addconnbutton" type="button" data-bs-toggle="modal" data-bs-target="#AddConnectionModal">+ Add connection</div>
  </div>
  </Authorized>
</AuthorizeView>


@code {
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}Login");
        } 
        else 
        {
            if (!CurrentUser.initialised()) 
            {
                string userId = string.Empty;
                var claims = user.Claims;
                foreach (var claim in claims) 
                {
                    if (claim.Type.Equals("oid"))
                    {
                        userId = claim.Value;
                    }
                }
                var userDTO = new UserCreateDTO
                {
                    oid = userId,
                    Name = user.Identity?.Name
                };
                
                var response = await Http.PostAsJsonAsync("api/User", userDTO);
                CurrentUser.userOid = userId;

                var teams = await Http.GetFromJsonAsync<List<TeamDTO>>($"api/User/teams/{userId}");
                if (teams != null) CurrentUser.teams = teams;

                var userConnections = await Http.GetFromJsonAsync<List<ConnectionDTO>>($"api/User/connections/{userId}");
                if (userConnections != null) CurrentUser.connections = userConnections;
            }

            _userOrTeamConnections = CurrentUser.connections;

            if (!Model.Graph.initialised()) 
            {
                var papers = await Http.GetFromJsonAsync<List<PaperDTO>>("api/Paper");
                if (papers != null) Model.Graph.allPapers = papers;

                var connections = await Http.GetFromJsonAsync<List<ConnectionDTO>>("api/Connection");
                if (connections != null) Model.Graph.publicConnections = connections;
                Model.Graph.initialise();
            }
            _dataIsLoaded = true;
        }
    }

    private bool _dataIsLoaded = false;
    private int getLeftPosPaper(PaperDTO p) => Model.Graph.paperToPositions[p.Id].Item1;
    private int getTopPosPaper(PaperDTO p) => Model.Graph.paperToPositions[p.Id].Item2;

    private List<ConnectionDTO>? _userOrTeamConnections;
    private PaperDTO _selectedPaper = TestEntities.paperDTO;
    private TeamDTO? _selectedTeam = null;

    private async void setSelectedTeam(TeamDTO team) 
    {
        if(_selectedTeam != null && _selectedTeam.Id == team.Id)
        {
            _selectedTeam = null;
            CurrentUser.selectedTeam = null;
            _userOrTeamConnections = await Http.GetFromJsonAsync<List<ConnectionDTO>>($"api/User/connections/{CurrentUser.userOid}");
        }
        else
        {
            _selectedTeam = await Http.GetFromJsonAsync<TeamDTO>($"api/Team/{team.Id}");
            CurrentUser.selectedTeam = _selectedTeam;
            if (_selectedTeam != null) _userOrTeamConnections = await Http.GetFromJsonAsync<List<ConnectionDTO>>($"api/Team/connections/{_selectedTeam.Id}");
        }
        Refresh();
    }

    private void Refresh() {
        StateHasChanged();
    }

    private void RefreshTeam()
    {
        _selectedTeam = null;
        CurrentUser.selectedTeam = null;
        Refresh();
    }

    private int colour(TeamDTO team) => team.Colour;
}
