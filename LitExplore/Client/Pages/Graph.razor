@page "/"
@using LitExplore.Client.Connections
@using LitExplore.Client.Papers
@using LitExplore.Client.Teams
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<PageTitle>LitExplore</PageTitle>

<AuthorizeView>
  <Authorized>
  <div>
    @if ( _dataIsLoaded )
    {
        @foreach (PaperDTO p in Model.Graph.allPapers) 
        {
            <div class="paperbutton" @onclick="() => _selectedPaper = p">
                <PaperNode paper=@p left=@getLeftPosPaper(p) top=@getTopPosPaper(p) />
            </div>
        }
        <ConnectionLines @ref="_connectionLines" connections=@Model.Graph.publicConnections extraConnections=@_userOrTeamConnections />
        <AddConnectionWindow />
    } 
    else 
    {
        <div class="loadingcontainer">
            <div class="loadinglabel">Loading ...</div>
        </div>
    }

    <div class="teams">
        @if (Model.CurrentUser.teams != null)
        {
            foreach (var team in Model.CurrentUser.teams)
            {
                <div class="teamSection">
                    @if(_selectedTeam != null && _selectedTeam.Id == team.Id)
                    {
                        <button class="edit" data-bs-toggle="modal" data-bs-target="#teamModal">
                            <span class="oi oi-pencil"></span>
                        </button>
                    }
                    <button type="button" class="c-@colour(team) teamButton" @onclick="() => setSelectedTeam(team)">
                        <span>@team.TeamName.Substring(0,1).ToUpper()</span>
                    </button>
                </div>
                }
            <button class="addteambutton" data-bs-toggle="modal" data-bs-target="#addTeamModal"><div class="addTeamButtonText"><span class="oi oi-plus"></span></div></button>
        }
    </div>
    <PaperInfoWindow paper=@_selectedPaper/>
    <TeamCustomisation team=@_selectedTeam/>
    <TeamForm adminId=@_currentUserId/>
    <div class="addconnbutton" type="button" data-bs-toggle="modal" data-bs-target="#AddConnectionModal">+ Add connection</div>
  </div>
  </Authorized>
</AuthorizeView>


@code {
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}Login");
        } 
        else 
        {
            if (!Model.CurrentUser.initialised()) 
            {
                string userId = string.Empty;
                var claims = user.Claims;
                foreach (var claim in claims) 
                {
                    if (claim.Type.Equals("oid"))
                    {
                        userId = claim.Value;
                    }
                }

                var userDTO = new UserCreateDTO
                {
                    oid = userId,
                    Name = user.Identity?.Name
                };
                
                var response = await Http.PostAsJsonAsync("api/User", userDTO);
                Model.CurrentUser.userOid = userId;
                Model.CurrentUser.teams = await Http.GetFromJsonAsync<TeamDTO[]>($"api/User/teams/{userId}");
                Model.CurrentUser.connections = await Http.GetFromJsonAsync<ConnectionDTO[]>($"api/User/connections/{userId}");
            }

            _userOrTeamConnections = Model.CurrentUser.connections;

            if (!Model.Graph.initialised()) 
            {
                Model.Graph.allPapers = await Http.GetFromJsonAsync<PaperDTO[]>("api/Paper");
                Model.Graph.publicConnections = await Http.GetFromJsonAsync<ConnectionDTO[]>("api/Connection");
                Model.Graph.initialise();
            }
            _selectedPaper = Model.Graph.allPapers.ElementAt(0);
            _currentUserId = Model.CurrentUser.userOid;
            _dataIsLoaded = true;
        }
    }

    private bool _dataIsLoaded = false;

    private string _currentUserId;
    private ConnectionLines _connectionLines;
    private int getLeftPosPaper(PaperDTO p) => Model.Graph.paperToPositions[p.Id].Item1;
    private int getTopPosPaper(PaperDTO p) => Model.Graph.paperToPositions[p.Id].Item2;

    private ConnectionDTO[]? _userOrTeamConnections;
    private PaperDTO _selectedPaper = TestEntities.paperDTO;
    private TeamDTO? _selectedTeam = null;

    private async void setSelectedTeam(TeamDTO team) 
    {
        _selectedTeam = await Http.GetFromJsonAsync<TeamDTO>($"api/Team/{team.Id}");
        Model.CurrentUser.selectedTeam = _selectedTeam;
        _userOrTeamConnections = await Http.GetFromJsonAsync<ConnectionDTO[]>($"api/Team/connections/{_selectedTeam.Id}");

        _connectionLines.Refresh();
        StateHasChanged();
    }
    private int colour(TeamDTO team) => team.Colour;
}
