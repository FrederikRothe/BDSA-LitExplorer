@page "/"
@using LitExplore.Client.Connections
@using LitExplore.Client.Papers
@using LitExplore.Client.Teams
@using System.Security.Claims
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<PageTitle>LitExplore</PageTitle>

<AuthorizeView>
  <Authorized>
  <div>
    @if (Model.allPapers != null && _dataIsLoaded )
    {
        @foreach (PaperDTO p in Model.allPapers) 
        {
            <div class="paperbutton" @onclick="() => setSelectedPaper(p)">
                <PaperNode paper=@p left=@getLeftPosPaper(p) top=@getTopPosPaper(p) />
            </div>
        }
    }
    @if (Model.publicConnections != null && _dataIsLoaded )
    {
        @foreach (ConnectionDTO c in Model.publicConnections) {
            <div class="connectionbutton" @onclick="() => setSelectedConnection(c)">
                <ConnectionLine connection=@c />
            </div>
        }
    }   

    <div class="teams">
        <button type="button" @onClick="() => setSelectedTeam()" class="teambutton" data-bs-toggle="modal" data-bs-target="#teamModal" />
    </div>
    <PaperInfoWindow paper=@_selectedPaper/>
    <ConnectionInfoWindow connection=@_selectedConnection/>
    <TeamCustomisation team=@_selectedTeam/>
  </div>
  </Authorized>
  <NotAuthorized>
  </NotAuthorized>
</AuthorizeView>


@code {

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private bool _dataIsLoaded = false;
    private ConnectionDTO _selectedConnection = TestEntities.connectionDTO;
    private void setSelectedConnection(ConnectionDTO connection) 
    {
        _selectedConnection = connection;
    }
    private int getLeftPosPaper(PaperDTO p) => GraphPositions.paperToPositions[p.Id].Item1;

    private int getTopPosPaper(PaperDTO p) => GraphPositions.paperToPositions[p.Id].Item2;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}Login");
        } 
        else 
        {
            string userId = string.Empty;
            claims = user.Claims;
            foreach (var claim in claims) 
            {
                if (claim.Type.Equals("oid"))
                {
                    userId = claim.Value;
                }
            }

            var userDTO = new UserCreateDTO
            {
                oid = userId,
                Name = user.Identity?.Name
            };
            
            var response = await Http.PostAsJsonAsync("api/User", userDTO);

            if (response.IsSuccessStatusCode)
            {
                Model.currentUser = await response.Content.ReadFromJsonAsync<UserDTO>();
            }

            Model.currentUserTeams = await Http.GetFromJsonAsync<TeamDTO[]>($"api/User/teams/{userId}");
            Model.currentUserConnections = await Http.GetFromJsonAsync<ConnectionDTO[]>($"api/User/connections/{userId}");

            GraphPositions.initialise(Http);

            Model.allPapers = await Http.GetFromJsonAsync<PaperDTO[]>("api/Paper");
            _selectedPaper = Model.allPapers.ElementAt(0);
            Model.publicConnections = await Http.GetFromJsonAsync<ConnectionDTO[]>("api/Connection");
            //_selectedConnection = Model.publicConnections.ElementAt(0);
            _dataIsLoaded = true;
        }
    }

    private PaperDTO _selectedPaper = TestEntities.paperDTO;
    private void setSelectedPaper(PaperDTO paper) 
    {
        _selectedPaper = paper;
    }
    private TeamDTO _selectedTeam = TestEntities.teamDTO;
    private void setSelectedTeam(TeamDTO team) 
    {
        _selectedTeam = team;
    }
}