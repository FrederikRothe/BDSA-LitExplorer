@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="addTeamModal"
    style="display: none;" tabindex="-1" aria-labelledby="addTeamModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create new team</h5>
                <button @onclick="Clear" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <EditForm Model="@_team" OnValidSubmit="@HandleValidSubmit">
                <div class="modal-body">

                    <span style="color: var(--red);">@_errorMessage</span>
                    <span style="color: var(--green);">@_successMessage</span>

                    <div>
                        <h2>Team Name</h2>
                        <input class="form-control" type="text" id="teamname" @bind=_team.TeamName/>
                    </div>
                </div>
                <div class="modal-footer">
                    <ButtonIcon type="submit" icon="oi oi-check" tooltip="Create" />
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public string AdminId { get; set; } = null!;
    
    private TeamCreateDTO _team = new();
    
    private string _errorMessage = string.Empty;

    private string _successMessage = string.Empty;

    [Parameter] public EventCallback refreshGraph { get; set; }
    
    private async Task HandleValidSubmit()
    {
        if (_team.TeamName == null || _team.TeamName == "")
        {
            _successMessage = string.Empty;
            _errorMessage = "Please enter a team name.";
            return;   
        }
        if (CurrentUser.teams.Count() >= 7) 
        {
            _successMessage = string.Empty;
            _errorMessage = "Too many teams.";
            return;   
        }
        _team.TeamLeaderId = AdminId;
        var rand = new Random();
        _team.Colour = rand.Next(1, 5);

        var response = await Http.PostAsJsonAsync("api/Team", _team);

        if (response.IsSuccessStatusCode)
        {
            _successMessage = "Created!";
            _errorMessage = string.Empty;
            var created = await response.Content.ReadFromJsonAsync<TeamDTO>();
            if (CurrentUser.teams != null && created != null) 
            {
                CurrentUser.teams.Add(created);
            }
            await refreshGraph.InvokeAsync();
        } 
        else 
        {
            _errorMessage = $"An error occured.";
        }
        _errorMessage = string.Empty;
        _team = new();
    }
    
    private void Clear() {
        _successMessage = string.Empty;
        _errorMessage = string.Empty;
        _team = new();
    }
}