@page "/teamcustomisation"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

  <div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="teamModal" style="display: none;" tabindex="-1" aria-labelledby="teamModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
      @if(team != null)
      {
        <div class="modal-header">
          <h1 class="modal-title" id="exampleModalLabel">@team.TeamName</h1>
          <button @onclick="Reset" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <EditForm Model="@teamUpdated">
            <div class="content">
              <div class="teamName">
                <p>team name</p>
                <input disabled=@isNotTeamOwner @bind="teamName" class="nameInput" type="text">
              </div>
              <hr/>
              <div class="colours">
                <p>team colour</p>
                  <div class="colourChoices btn-group-toggle" data-toggle="buttons" id="options">
                    <label>
                      <input disabled=@isNotTeamOwner class="redbutton" type="radio" name="options" id="red" autocomplete="off" Value=1 checked=@(@team.Colour==1) @onchange="OnChange">
                    </label>
                    <label>
                      <input disabled=@isNotTeamOwner class="yellowbutton" type="radio" name="options" id="yellow" autocomplete="off" Value=2 checked=@(@team.Colour==2) @onchange="OnChange">
                    </label>
                    <label>
                      <input disabled=@isNotTeamOwner class="greenbutton" type="radio" name="options" id="green" autocomplete="off" Value=4 checked=@(@team.Colour==4) @onchange="OnChange">
                    </label>
                    <label>
                      <input disabled=@isNotTeamOwner class="orangebutton" type="radio" name="options" id="orange" autocomplete="off" Value=3 checked=@(@team.Colour==3) @onchange="OnChange">
                    </label>
                  </div>
              </div>
              <hr/>
              <div class="members">
                <p>team members</p>
                <div>
                  <ul class="memberList">
                    @foreach (var member in members)
                    {
                      <li class="userRow">
                        <p>@member.Name</p>
                        @if(member.oid != team.TeamLeaderId)
                        {
                          <button disabled=@isNotTeamOwner @onclick="() => RemoveFromTeam(member.oid)" class="oi oi-ban"></button>
                        }
                      </li>
                    }
                  </ul>
                  @if(!isNotTeamOwner)
                  {  
                    <div>
                      <span class="addHeader">add member to team</span>
                      <div class="inputUser">
                        <input @bind="_userAdd" class="nameInput bordered" type="text" placeholder="Enter oid...">
                        <button class="addUserButton" @onclick="() => AddUser(_userAdd)">
                          <span class="uglyfix oi oi-plus"></span>
                        </button>
                      </div>
                      <span style="color: var(--@_col); font-size: 14px">@_msg</span>
                    </div>
                  }
                </div>
              </div>
            </div>
          </EditForm>
        </div>
        <div class="modal-footer">
          @if(!isNotTeamOwner)
          {
            <ButtonIcon onButtonClick="Delete" icon="oi oi-trash" type="button" colour="red" tooltip="Delete" data_bs_dismiss="modal"/>
            <ButtonIcon onButtonClick="Update" icon="oi oi-check" type="submit" tooltip="Save" />
          } 
        </div>
      } 
      </div>
    </div>
  </div>

@code {

    private TeamUpdateDTO teamUpdated = new();

    [Parameter] public TeamDTO team { get; set; } = null!;

    public bool isNotTeamOwner { get; set; } = false;

    public int colour { get; set; }

    private string _msg { get; set; } = "";

    private string _col { get; set;} = "";

    public string teamName { get; set; } = "";
    
    private bool _loaded { get; set; } = false;

    private string _userAdd { get; set; } = "";

    [Parameter] public EventCallback refreshTeam { get; set; }

    public List<UserDTO> members = new List<UserDTO>();

    private async Task AddUser(string userOid)
    {
      if(userOid == "")
      {
        _msg = "Empty search";
        _col = "red";
        return;
      }

      foreach(var member in members)
      {
        if(member.oid == userOid)
        {
          _msg = "User already in team";
          _col = "red";
          return;
        }
      }

      var response = await Http.PutAsJsonAsync($"api/Team/{team.Id}/user/{userOid}", userOid);
      if(response.IsSuccessStatusCode)
      {
        var user = await Http.GetFromJsonAsync<UserDTO>($"api/User/{userOid}");
        members.Add(user);
        _msg = "User added";
        _col = "green";
        StateHasChanged();
      }
      else 
      {
        _msg = "User not found!";
        _col = "red";
        return;
      }
    }

    private void OnChange(ChangeEventArgs args)
    {
      if (args.Value != null)
      {
        var arg = args.Value.ToString();
        if (arg != null) colour = int.Parse(arg);
      }
    }

    private void Reset()
    {
      _msg = "";
      _col = "";
      _userAdd = "";
    }

    [Parameter] public EventCallback refreshGraph { get; set; }

    protected override async Task OnParametersSetAsync()
    {
      _msg = "";
      _col = "";

      if (team != null)
      {
        colour = team.Colour;
        isNotTeamOwner = team.TeamLeaderId != Model.CurrentUser.userOid;
        if (team.UserIDs != null)
        {
          var users = await Http.GetFromJsonAsync<UserDTO[]>($"api/Team/users/{team.Id}");
          if (users != null) members = users.ToList();
          teamName = team.TeamName; 
        } 
        else 
        {
          teamName = "Unknown Team";
        }
        _loaded = true;
        await base.OnParametersSetAsync();
      }
    }
    
    private async Task Update()
    {
      teamUpdated = await Http.GetFromJsonAsync<TeamUpdateDTO>($"api/Team/{team.Id}") ?? new();
      if(teamName != "")
      {
        teamUpdated.TeamName = teamName;
      }

      teamUpdated.Colour = colour;

      var response = await Http.PutAsJsonAsync($"api/Team/{teamUpdated.Id}", teamUpdated);
      await refreshTeam.InvokeAsync();
      NavigationManager.NavigateTo($"{NavigationManager.BaseUri}", forceLoad: true);
    }

    private async Task RemoveFromTeam(string oId)
    {
      if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this team member?"))
        {
          await Http.DeleteAsync($"api/Team/{team.Id}/user/{oId}");
          members.RemoveAll(u => u.oid == oId);
          StateHasChanged();
        }
    }

    private async Task Delete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this team?"))
        {
            await Http.DeleteAsync($"api/Team/{team.Id}");
            Model.CurrentUser.teams.RemoveAll(t => t.Id == team.Id);
            await refreshTeam.InvokeAsync();
            StateHasChanged();
        }
    }
}