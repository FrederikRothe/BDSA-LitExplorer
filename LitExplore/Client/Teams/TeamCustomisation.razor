@page "/teamcustomisation"
@inject HttpClient Http

<div class="modal fade modal-dialog modal-dialog-centered modal-dialog-scrollable" id="teamModal" style="display: none;" tabindex="-1" aria-labelledby="teamModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title" id="exampleModalLabel">@teamName</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <EditForm Model="@teamUpdated" OnValidSubmit="@HandleValidSubmit">
          <div class="content">
            <div class="teamName">
              <p>team name</p>
              <input class="nameInput" type="text" value=@teamName>
            </div>
            <hr/>
            <div class="colours">
              <p>team colour</p>
                <div class="colourChoices btn-group-toggle" @bind="colour" data-toggle="buttons">
                  <label>
                    <input class="redbutton" type="radio" name="options" id="red" autocomplete="off" value=1 checked=@(@team.Colour==1)>
                  </label>
                  <label>
                    <input class="yellowbutton" type="radio" name="options" id="yellow" autocomplete="off" value=2 checked=@(@team.Colour==2)>
                  </label>
                  <label>
                    <input class="greenbutton" type="radio" name="options" id="green" autocomplete="off" value=3 checked=@(@team.Colour==3)>
                  </label>
                  <label>
                    <input class="orangebutton" type="radio" name="options" id="orange" autocomplete="off" value=4 checked=@(@team.Colour==4)>
                  </label>
                </div>
            </div>
            <hr/>
            <div class="members">
              <p>team members</p>
              <div>
                <ul class="memberList">
                  @foreach (var member in members)
                  {
                    <li class="userRow">
                      <p>@member.Name</p>
                      <button class="oi oi-ban"></button>
                    </li>
                  }
                  <li class="userRow">
                      <p>theis stensgaard</p>
                      <button class="oi oi-ban"></button>
                  </li>
                  <li class="userRow">
                      <p>nadija koch</p>
                      <button class="oi oi-ban"></button>
                    </li>
                    <li class="userRow">
                      <p>fredi rothe</p>
                      <button class="oi oi-ban"></button>
                    </li>
                    <li class="userRow">
                      <p>sebastian vestman</p>
                      <button class="oi oi-ban"></button>
                    </li>
                    <li class="userRow">
                      <p>c√•sper marschall</p>
                      <button class="oi oi-ban"></button>
                    </li>
                    <li class="userRow">
                      <p>emil hulborg</p>
                      <button class="oi oi-ban"></button>
                    </li>
                </ul>
              </div>
            </div>
          </div>
        </EditForm>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger">Delete</button>
        <button type="submit" class="btn btn-primary">Save</button>
      </div>
    </div>
  </div>
</div>

@code {

    private TeamUpdateDTO teamUpdated = new();
    [Parameter]
    public TeamDTO team { get; set; } = null!;
    [Parameter]
    public bool isTeamOwner { get; set; } = false;
    public int colour { get; set; }

    public string teamName {get; set;}
    private void removeUser(int userId) 
    {
        if (isTeamOwner)
        {
            //currentTeam.UserIDs.Remove(currentTeam.UserIDs.Where(u => u == userId).First());
        }
    }

    public List<UserDTO> members = new List<UserDTO>();

    protected override async Task OnInitializedAsync() 
    {
      foreach(var userId in team.UserIDs){
        UserDTO? user = await Http.GetFromJsonAsync<UserDTO>($"api/User/{userId}");
        members.Add(user);
      }

      teamName = team.TeamName;
    } 
    
    private async Task HandleValidSubmit()
    {
      if(teamName != "")
      {
        teamUpdated.TeamName = teamName;
      }

      teamUpdated.Colour = colour;
      teamUpdated.TeamLeaderId = team.TeamLeaderId == null ? null : team.TeamLeaderId;
      
    }
}